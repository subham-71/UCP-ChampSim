#include "cache.h"

vector<uint32_t> currentPartition, newPartition, wayParent;
vector<uint32_t> umonglobal(16, 0);
uint32_t totalAccess = 0;

// G6: initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for(int i = 0; i<NUM_CPUS; i++)
        currentPartition.push_back(0);
    currentPartition[0] = 16;
    wayParent.assign(16,0);
    for(int i = 0; i<NUM_CPUS; i++)
        newPartition.push_back(LLC_WAY/NUM_CPUS);
}

// utility function to print a vector
void debugPrint(vector<uint32_t> &V) {
    for (auto x:V) {
        cout<<x<<" ";
    }
    cout<<endl;
    return;
}

// G6: find replacement victim in the llc
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{

    uint32_t way = 0, currentCore=cpu, maxLru = 0;

    // debugPrint(currentPartition);
    // debugPrint(newPartition);

    if (currentPartition[cpu]<newPartition[cpu]) {
        for (currentCore=0; currentCore<NUM_CPUS; currentCore++) {
            if(currentPartition[currentCore]>newPartition[currentCore]) {
                break;
            }
        }
    }

    for (way=0; way<LLC_WAY; way++) {
        if (wayParent[way] == currentCore and block[set][way].valid == false) {
            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
        if (wayParent[way] == currentCore) {
            maxLru = max(maxLru, block[set][way].lru);
        }
    }

    if (way == LLC_WAY) {
        for (way=0; way<LLC_WAY; way++) {
            if (wayParent[way] == currentCore and block[set][way].lru == maxLru) {
                DP ( if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });

                break;
            }
        }
    }

    if (way == NUM_WAY) {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << " cpu: " << cpu << endl;
        assert(0);
    }

    currentPartition[cpu]++;
    currentPartition[currentCore]--;
    wayParent[way]=cpu;

    for (uint32_t i=0; i<LLC_SET; i++) {
        block[i][way].lru = currentPartition[cpu] - 1;
    }

    return way;
}

// G6: called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    // G6: updates the lru values of the blocks present in the llc
    for (uint32_t i=0; i<LLC_WAY; i++) {
        if (wayParent[i] == cpu and block[set][i].lru < block[set][way].lru) {
            block[set][i].lru++;
        }
    }
    block[set][way].lru = 0; // promote to the MRU position

    return;
}

void CACHE::llc_replacement_final_stats()
{

}
